name: release

on:
  workflow_dispatch:
    inputs:
      update_type:
        description: "Update Type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
      release_note:
        description: "Release Note"
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Unshallow
        run: git fetch --prune --unshallow --tags
      - name: Get New Version
        id: get_new_version
        run: |
          # Get Current Version (ex. 0.3.6)
          CurrentVersion=`git describe --tags --abbrev=0 | cut -c 2-`
          # Divide Version with Space (ex. 0 3 6)
          SpaceDividedVersion=${CurrentVersion//./ }
          # Make Array (ex. (0 3 6))
          VersionArray=()
          for i in $SpaceDividedVersion; do VersionArray+=($i) ; done
          # Insert the Versions into Variable
          MajorVersion=${VersionArray[0]}
          MinorVersion=${VersionArray[1]}
          PatchVersion=${VersionArray[2]}
          # Update to New Version
          if [ ${UPDATE_TYPE} = "major" ]; then MajorVersion=$((MajorVersion + 1))
          elif [ ${UPDATE_TYPE} = "minor" ]; then MinorVersion=$((MinorVersion + 1))
          else PatchVersion=$((PatchVersion + 1)); fi
          # Output Current Version and New Version
          echo "current_version=v$CurrentVersion"  >> $GITHUB_OUTPUT
          echo "new_version=v$MajorVersion.$MinorVersion.$PatchVersion" >> $GITHUB_OUTPUT
        env:
          UPDATE_TYPE: ${{ github.event.inputs.update_type }}
      - name: Get Release Note
        id: get_release_note
        run: |
          ReleaseNote=$(curl -X POST -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/generate-notes -d '{"tag_name":"${{ steps.get_new_version.outputs.new_version }}", "previous_tag_name":"${{ steps.get_new_version.outputs.current_version }}"}' | jq .body | sed 's/"//g')
          echo "release_note=$ReleaseNote" >> $GITHUB_OUTPUT
      - name: Create Tag
        run: |
          git tag ${{ steps.get_new_version.outputs.new_version }}
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          body: ${{ steps.get_release_note.outputs.release_note }}
          tag: ${{ steps.get_new_version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
